"use strict";

var _common = require("test/common");

var _binary = _interopRequireDefault(require("test/binary"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

test('rgba', () => {
  const image = new _common.Image(2, 1);
  const rgba = image.getRGBAData();
  expect(rgba).toBeInstanceOf(Uint8Array);
});
test('clamped', () => {
  const image = new _common.Image(2, 1);
  const rgba = image.getRGBAData({
    clamped: true
  });
  expect(rgba).toBeInstanceOf(Uint8ClampedArray);
});
test('32 bit grey image', () => {
  const img = new _common.Image(2, 1, [-2000, 3000], {
    kind: 'GREY',
    bitDepth: 32
  });
  const data = img.getRGBAData();
  expect(Array.from(data)).toStrictEqual([0, 0, 0, 255, 255, 255, 255, 255]);
  const img1 = new _common.Image(3, 1, [-2000, 3000, 500], {
    kind: 'GREY',
    bitDepth: 32
  });
  const data1 = img1.getRGBAData();
  expect(Array.from(data1)).toStrictEqual([0, 0, 0, 255, 255, 255, 255, 255, 127, 127, 127, 255]);
});
test('32 bit rgb image', () => {
  const img = new _common.Image(2, 1, [1, 2, 3, 3, 2, 1], {
    alpha: false,
    bitDepth: 32
  });
  const data = img.getRGBAData();
  expect(Array.from(data)).toStrictEqual([0, 127, 255, 255, 255, 127, 0, 255]);
});
test('binary image', () => {
  const img = new _common.Image({
    width: 3,
    height: 2,
    kind: 'BINARY',
    data: (0, _binary.default)`
      100
      011
    `
  });
  const data = img.getRGBAData();
  expect(Array.from(data)).toStrictEqual([255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
});