"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _common = require("test/common");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('save to disk', () => {
  beforeEach(_common.refreshTmpDir);
  afterEach(_common.refreshTmpDir);
  it('load then save', async () => {
    const img = await (0, _common.load)('format/png/rgba32.png');
    let dataURL = img.toDataURL();
    await img.save(`${_common.tmpDir}/img1.png`); // reload the new file to check that the image is identical

    const otherImg = await _common.Image.load(`${_common.tmpDir}/img1.png`);
    expect(otherImg.toDataURL()).toBe(dataURL);
  });
  it('save vs toBuffer', async () => {
    const img = await (0, _common.load)('format/png/rgb24.png');
    await img.save(`${_common.tmpDir}/img.png`);
    const data = Uint8Array.from(_fs.default.readFileSync(`${_common.tmpDir}/img.png`));
    const buffer = img.toBuffer();
    expect(buffer).toStrictEqual(data);
  });
  it('save then load (jpg)', async () => {
    const img = await (0, _common.load)('format/png/rgba32.png');
    const tmpJpg = `${_common.tmpDir}/img1.jpg`;
    await img.save(tmpJpg, {
      format: 'jpeg'
    });
    const reloaded = await _common.Image.load(tmpJpg);
    expect(reloaded.width).toBe(30);
  });
  it('new then save', async () => {
    const img = (0, _common.getSquare)();
    await img.save(`${_common.tmpDir}/img2.png`);
    expect(_fs.default.existsSync(`${_common.tmpDir}/img2.png`)).toBe(true);
  });
  it('new then save with unsupported bit depth', async () => {
    const img = new _common.Image(2, 2, {
      kind: 'BINARY'
    });
    img.setBitXY(0, 0);
    img.setBitXY(1, 1);
    const imgBinary = `${_common.tmpDir}/imgBinary.png`;
    await img.save(imgBinary);
    const reloaded = await (0, _common.load)(imgBinary);
    expect(Array.from(reloaded.data)).toStrictEqual([255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255]);
  });
  it('new then save bmp', async () => {
    const img = (0, _common.get1BitSquare)();
    await img.save(`${_common.tmpDir}/square.bmp`, {
      format: 'bmp'
    });
    expect(_fs.default.existsSync(`${_common.tmpDir}/square.bmp`)).toBe(true);
  });
});