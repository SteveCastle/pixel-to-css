"use strict";

var _common = require("test/common");

var _binary = _interopRequireDefault(require("test/binary"));

var _mlMatrix = _interopRequireDefault(require("ml-matrix"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('check the close function', function () {
  it('check for GREY image 5x5', function () {
    let kernel = new _mlMatrix.default([[1, 1, 1], [1, 1, 1], [1, 1, 1]]);
    let image = new _common.Image(5, 5, [255, 255, 0, 255, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 255, 0, 255, 255], {
      kind: 'GREY'
    });
    expect(Array.from(image.close({
      kernel
    }).data)).toStrictEqual([255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255]);
  });
  it('check for GREY image 5x5 2 iterations', function () {
    let kernel = new _mlMatrix.default([[1, 1, 1], [1, 1, 1], [1, 1, 1]]);
    let image = new _common.Image(5, 5, [255, 255, 0, 255, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 255, 0, 255, 255], {
      kind: 'GREY'
    });
    expect(Array.from(image.close({
      kernel,
      iterations: 2
    }).data)).toStrictEqual([255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255]);
  });
  it('check on 5x5 mask', function () {
    /*
     We will create the following mask
      ______
     |xx xx|
     |x   x|
     |x   x|
     |x   x|
     |xx xx|
     */
    let mask = new _common.Image(5, 5, (0, _binary.default)`
      11011
      10001
      10001
      10001
      11011
    `, {
      kind: 'BINARY'
    });
    expect(mask.close().data).toStrictEqual((0, _binary.default)`
        11111
        10001
        10001
        10001
        11111
    `);
  });
});