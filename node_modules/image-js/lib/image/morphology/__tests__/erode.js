"use strict";

var _common = require("test/common");

var _binary = _interopRequireDefault(require("test/binary"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('check the erode function', function () {
  it('check for GREY image 5x5', function () {
    let image = new _common.Image(5, 5, [255, 0, 255, 255, 255, 255, 0, 255, 255, 255, 255, 0, 255, 255, 255, 255, 0, 255, 255, 255, 255, 0, 255, 255, 255], {
      kind: 'GREY'
    });
    expect(Array.from(image.erode().data)).toStrictEqual([0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255]);
  });
  it('check for another GREY image 5x5', function () {
    let image = new _common.Image(5, 5, [255, 255, 255, 255, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 255, 255, 255, 255], {
      kind: 'GREY'
    });
    const expected = [255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255];
    expect(Array.from(image.erode().data)).toStrictEqual(expected);
  });
  it('check for binary image 5x5', function () {
    let mask = new _common.Image(5, 5, (0, _binary.default)`
      10111
      10111
      10111
      10111
      10111
    `, {
      kind: 'BINARY'
    });
    expect(mask.erode().data).toStrictEqual((0, _binary.default)`
        00011
        00011
        00011
        00011
        00011
      `);
  });
  it('checks erode with 2 iterations', function () {
    let mask = new _common.Image(5, 5, (0, _binary.default)`
    10111
    10111
    10111
    10111
    10111
  `, {
      kind: 'BINARY'
    });
    expect(mask.erode({
      iterations: 2
    }).data).toStrictEqual((0, _binary.default)`
      00001
      00001
      00001
      00001
      00001
    `);
  });
  it('checks a 5x5 binary', function () {
    const mask = new _common.Image(5, 5, (0, _binary.default)`
      11111
      11011
      10001
      11011
      11111
    `, {
      kind: 'BINARY'
    });
    expect(mask.erode().data).toStrictEqual((0, _binary.default)`
      10001
      00000
      00000
      00000
      10001
    `);
  });
  it('checks another 5x5 binary', function () {
    const mask = new _common.Image(5, 5, (0, _binary.default)`
      11011
      11011
      00000
      11011
      11011
    `, {
      kind: 'BINARY'
    });
    expect(mask.erode().data).toStrictEqual((0, _binary.default)`
      10001
      00000
      00000
      00000
      10001
    `);
  });
  it('checks from binary image 5x3 with vertical kernel', function () {
    const kernel = [[1, 1, 1]];
    const mask = new _common.Image(3, 5, (0, _binary.default)`
      110
      100
      111
      001
      011
    `, {
      kind: 'BINARY'
    });
    const expected = (0, _binary.default)`
      100
      100
      000
      001
      001
    `;
    expect(mask.erode({
      kernel
    }).data).toStrictEqual(expected);
  });
  it('checks from binary image 5x5, kernel with holes', function () {
    const kernel = [[1, 1, 1], [1, 0, 1], [1, 1, 1]];
    const mask = new _common.Image(5, 5, (0, _binary.default)`
      11111
      11111
      11101
      11111
      11111
    `, {
      kind: 'BINARY'
    });
    const expected = (0, _binary.default)`
      11111
      11000
      11010
      11000
      11111
    `;
    expect(mask.erode({
      kernel
    }).data).toStrictEqual(expected);
  });
});