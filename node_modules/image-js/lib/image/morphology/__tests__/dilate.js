"use strict";

var _binary = _interopRequireDefault(require("test/binary"));

var _common = require("test/common");

var _mlMatrix = _interopRequireDefault(require("ml-matrix"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('check the dilate function', function () {
  it('check for GREY image 5x5', function () {
    let kernel = new _mlMatrix.default([[1, 1, 1], [1, 1, 1], [1, 1, 1]]);
    let image = new _common.Image(5, 5, [255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255], {
      kind: 'GREY'
    });
    expect(Array.from(image.dilate({
      kernel: kernel
    }).data)).toStrictEqual([255, 255, 0, 255, 255, 255, 255, 0, 255, 255, 255, 255, 0, 255, 255, 255, 255, 0, 255, 255, 255, 255, 0, 255, 255]);
  });
  it('check for another GREY image 5x5', function () {
    let image = new _common.Image(5, 5, [255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255], {
      kind: 'GREY'
    });
    expect(Array.from(image.dilate().data)).toStrictEqual([255, 255, 0, 255, 255, 255, 255, 0, 255, 255, 0, 0, 0, 0, 0, 255, 255, 0, 255, 255, 255, 255, 0, 255, 255]);
  });
  it('check for BINARY image 5x5', function () {
    const mask = new _common.Image(5, 5, (0, _binary.default)`
      10001
      00000
      00000
      00000
      10001
    `, {
      kind: 'BINARY'
    });
    const expected = (0, _binary.default)`
      11011
      11011
      00000
      11011
      11011
    `;
    expect(mask.dilate().data).toStrictEqual(expected);
  });
});