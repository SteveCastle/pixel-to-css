"use strict";

var _common = require("test/common");

var _binary = _interopRequireDefault(require("test/binary"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('we check we can extract a part of B/W image', function () {
  it('check the extract without specify position', async () => {
    let mask = new _common.Image(2, 2, {
      kind: 'BINARY'
    });
    mask.setBitXY(0, 0);
    mask.setBitXY(1, 1);
    const image = await (0, _common.load)('BW4x4.png');
    expect(function () {
      image.extract(mask);
    }).toThrow(/can not extract an image/);
  });
  it('check a binary image extract', function () {
    let image = new _common.Image(8, 8, (0, _binary.default)`
        00011000
        00011000
        00011000
        11111111
        11111111
        00011000
        00011000
        00011000
      `, {
      kind: 'BINARY'
    });
    let mask = new _common.Image(4, 4, (0, _binary.default)`
        1111
        0000
        1111
        0000
      `, {
      kind: 'BINARY',
      parent: image,
      position: [2, 2]
    });
    let extract = image.extract(mask);
    expect(extract.bitDepth).toBe(1);
    expect(extract.height).toBe(4);
    expect(extract.width).toBe(4);
    expect(extract.data).toStrictEqual((0, _binary.default)`
      0110
      0000
      1111
      0000
    `);
  });
  it('check a rectangular binary image extract', function () {
    let image = new _common.Image(8, 4, (0, _binary.default)`
        00011000
        00011000
        00011000
        11111111
      `, {
      kind: 'BINARY'
    });
    let mask = new _common.Image(4, 2, (0, _binary.default)`
        1111
        0000
      `, {
      kind: 'BINARY',
      parent: image,
      position: [3, 2]
    });
    let extract = image.extract(mask);
    expect(extract.bitDepth).toBe(1);
    expect(extract.height).toBe(2);
    expect(extract.width).toBe(4);
    expect(extract.data).toStrictEqual((0, _binary.default)`
      1100
      0000
    `);
  });
  it('check by specify 1,1 position with parent', async () => {
    const image = await (0, _common.load)('BW4x4.png');
    let mask = new _common.Image(2, 2, {
      kind: 'BINARY',
      position: [1, 1],
      parent: image
    });
    mask.setBitXY(0, 0);
    mask.setBitXY(1, 0);
    let extract = image.extract(mask);
    expect((0, _common.getHash)(image)).toBe((0, _common.getHash)(extract.parent));
    expect(extract.width).toBe(2);
    expect(extract.height).toBe(2);
    expect(Array.from(extract.data)).toStrictEqual([0, 255, 255, 255, 255, 0, 0, 0]);
    /* This corresponds to an extract if it was RGBA image */

    /*
          Array.from(extract.data).should.eql([
              0, 0, 0, 255,
              255, 255, 255, 255,
              255, 255, 255, 0,
              255, 255, 255, 0
          ]);
    */
  });
});