"use strict";

var _common = require("test/common");

var _canvas = require("canvas");

test('constructor defaults', () => {
  let img = new _common.Image();
  expect(img.width).toBe(1);
  expect(img.height).toBe(1);
  expect(img.data).toHaveLength(4);
});
test('invalid constructor use', () => {
  expect(() => new _common.Image(0, 0)).toThrow(/width must be a positive integer/);
  expect(() => new _common.Image(5, 0)).toThrow(/height must be a positive integer/);
  expect(() => new _common.Image(10, 10, {
    kind: 'BLABLA'
  })).toThrow(/invalid image kind: BLABLA/);
  expect(() => new _common.Image(10, 10, 10)).toThrow(/options must be an object/);
  expect(() => new _common.Image({
    kind: 42
  })).toThrow(/kind must be a string/);
});
test('construct with a kind', () => {
  const img = new _common.Image(1, 1, {
    kind: 'RGB'
  });
  expect(img.data).toHaveLength(3);
});
test('construct a 32bit image', () => {
  const img = new _common.Image(1, 1, {
    bitDepth: 32
  });
  expect(img.bitDepth).toBe(32);
  expect(img.data).toBeInstanceOf(Float32Array);
  expect(img.maxValue).toBe(Number.MAX_VALUE);
});
test('create from Canvas', () => {
  let canvas = (0, _canvas.createCanvas)(2, 2);
  let ctx = canvas.getContext('2d');
  ctx.fillStyle = 'red';
  ctx.fillRect(0, 0, 2, 1);

  let img = _common.Image.fromCanvas(canvas);

  expect(Array.from(img.data)).toStrictEqual([255, 0, 0, 255, 255, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0]);
});
test('clone', async () => {
  const img = await (0, _common.load)('format/png/rgba32.png');
  const clone = img.clone();
  expect(clone).toBeInstanceOf(_common.Image);
  expect(clone).not.toBe(img);
  expect(clone.data).not.toBe(img.data);
  expect(clone.toDataURL()).toBe(img.toDataURL());
});
test('toString', () => {
  const image = new _common.Image();
  expect(image.toString()).toBe('[object IJSImage]');
});